# далее в курсе идут тестовые вопросы с кодом. тема встроенные функции.
# крайне мало практики с функциями высшего порядка мар фильтр и редус.
# поэтому коментирую тестовые вопросы.



# Встроенная функция map() имеет сигнатуру map(func, *iterables)
# Внутри функции func необходимо вернуть новое значение
# выведет не список, а специальный объект: <map object at 0x...>
# Такие объекты в Python называют итераторами
# Функции map() можно передать несколько последовательностей.
# В этом случае в функцию обратного вызова func будут передаваться
# сразу несколько элементов, расположенных в последовательностях на одинаковых позициях.

# Встроенная функция filter() имеет сигнатуру filter(func, iterable) ф
# ункции filter() можно в качестве первого параметра func передать значение None.
# В таком случае каждый элемент последовательности будет проверен на соответствие
# значению True

# Для использования функции reduce() необходимо подключить специальный модуль functools.
# Функция reduce() имеет сигнатуру reduce(func, iterable, initializer=None).
# Если начальное значение не установлено, то в его качестве используется
# первое значение из последовательности iterable
# Чтобы не писать каждый раз функции, определяющие такие стандартные
# математические операции как сумма или произведение:
# можно использовать уже реализованные функции из модуля operator.
# Неполный список функций из модуля operator выглядит так:
#
# Операция	       Синтаксис	  Функция
# Addition	          a + b	       add(a, b)
# ContainmentTest   obj in seq	   contains(seq, obj)
# Division	          a / b	       truediv(a, b)
# Division	          a // b	   floordiv(a, b)
# Exponentiation	  a ** b	   pow(a, b)
# Modulo	          a % b	       mod(a, b)
# Multiplication	  a * b        mul(a, b)
# Negation         	-a	           neg(a)
# Subtraction	     a - b	       sub(a, b)
# Ordering	         a < b	       lt(a, b)
# Ordering	         a <= b	       le(a, b)
# Equality	         a == b	       eq(a, b)
# Difference	     a != b	       ne(a, b)
# Ordering	         a >= b	       ge(a, b)
# Ordering	         a > b	       gt(a, b)
#
#

# ТЕСТЫ!



# Что выведет указанный ниже код?
#
# iterable = ['1', '2', '3']      - дается список из строк
# result = list(map(len, iterable)) - мар возвращает длину каждого элемента и преобразовывается в лист
# print(result)
# [1, 1, 1]


# Что выведет указанный ниже код?
#
# iterable = [[1], [2], [3]] - дается влоежный список
# result = list(map(len, iterable)) - аналогично предыдущему варианты хоть список и вложенный но длина всегда одна
# print(result)
# [1, 1, 1]


# iterable = [1, 2, 3]         - список из Int
# result = list(map(len, iterable)) - int не имеют длины должна выйти ошибка
# print(result)
# произойдет ошибка во время выполнения программы




# Что выведет указанный ниже код?
#
# list1 = list(map(len, ['this', 'is', 'a', 'test']))  - в лист сохраняется длина каждого переданного элемента
# list2 = [len(word) for word in ['this', 'is', 'a', 'test']] - аналогично предыдущему варианты, только с помощью генератора списка (list comprehension)
#
# print(list1 == list2) - ответ ТРУ



# Что выведет указанный ниже код?
#
# def is_a_student(score): - функция отсеивает элементы больше 75
#     return score > 75
# scores = [66, 90, 68, 59, 76, 60, 88, 74, 81, 65, 75]
# over_75 = list(filter(is_a_student, scores)) - показан пример функции фильтр и преобразования в лист
# print(over_75)
# Ответ [90, 76, 88, 81]




# def filter_vowels(letter):  - функция поверяет находится ли буква в заданой строке и возвращает тру\фалс
#     return letter in 'aeiou'
# letters = ['a', 'b', 'd', 'e', 'i', 'j', 'o']
# filtered_vowels = filter(filter_vowels, letters)
# print(*filtered_vowels)
# ОТВЕТ a e i o


# random_list = [1, 'a', 0, False, True, '0', 7, ''] - 0,False,''  это Фолс т.к. все что не заполнено или равно 0
# filtered_list = list(filter(None, random_list)) - фильтр проверяет итерируемый объект на всё что может быть "False"
# print(filtered_list)
# Ответ [1, 'a', True, '0', 7]


# Что выведет указанный ниже код?
# listA = [2, 3, 4]
# listB = [3, 2, 1]
# result = sum(map(pow, listA, listB)) = складываются 2**3 + 3**2 + 4**1
# print(result)
# Примечание. Встроенная функция pow() принимает два аргумента a и b
# и возвращает значение а в степени б
# ответ 21



#  Что выведет указанный ниже код?
# from operator import mul - мул перемножение элементов
# from functools import reduce
# result = reduce(mul, range(1, 6)) получается тут перемножаются значения от 1 до 5
# print(result)
#ОТВЕТ 120



# Что выведет указанный ниже код?
# from operator import add  - адд складывает значения а и б
# result = list(map(add, 'abc', '1234')) - получается тут складываются строки а+1, б+2, с+3 и не более
# print(result)
#ОТВЕТ ['a1', 'b2', 'c3']


# Что выведет указанный ниже код?
# from operator import mul мул умножает а на б
# result = list(map(mul, ['a', 'b', 'c'], [1, 2, 3])) выходит что тут а*1, б*2, с*3
# print(result)
# ОТВЕТ ['a', 'bb', 'ccc']


# Что выведет указанный ниже код?
# from operator import add  - адд уже был он складывает элементы
# from functools import reduce
# result = reduce(add, [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) - тут элементом является вложенный лист
# print(result) итогом сложения вложенных элементов будет просто лист
#ОТВЕТ [1, 2, 3, 4, 5, 6, 7, 8, 9]


































